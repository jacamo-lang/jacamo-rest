/*
   Project JaCaMo REST
*/

plugins {
  id 'java'
  id 'maven-publish'
  id "com.benjaminsproule.swagger" version "1.0.8"
}

defaultTasks 'run'

version '0.7-SNAPSHOT'
group   'org.jacamo'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

repositories {
    //maven { url "http://jacamo.sourceforge.net/maven2" }
    maven { url "https://raw.githubusercontent.com/jacamo-lang/mvn-repo/master" }
    maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    //flatDir { dirs 'lib' }
    mavenCentral()
}

dependencies {
    implementation ('org.jacamo:jacamo:1.1-SNAPSHOT') {
        exclude group: 'org.slf4j', module: 'slf4j-nop'
        changing = true
    }

    implementation 'javax.xml.bind:jaxb-api:2.3.1'
    implementation 'com.sun.xml.bind:jaxb-core:2.3.0.1'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.1'

    implementation 'org.glassfish.jersey.containers:jersey-container-servlet:2.29.1'
    implementation 'org.glassfish.jersey.containers:jersey-container-servlet-core:2.29.1'
    implementation 'org.glassfish.jersey.inject:jersey-hk2:2.29.1'
    implementation group: 'org.glassfish.jersey', name: 'jersey-bom', version: '2.29.1', ext: 'pom'

    implementation 'org.glassfish.jersey.core:jersey-server:2.29.1'
    implementation 'org.glassfish.jersey.core:jersey-client:2.29.1'
    implementation 'org.glassfish.jersey.media:jersey-media-multipart:2.29.1'

    implementation 'org.glassfish.jersey.media:jersey-media-json-jackson:2.29.1'

    // containers:
    implementation 'org.glassfish.jersey.containers:jersey-container-grizzly2-http:2.29.1'
    implementation 'org.glassfish.grizzly:grizzly-http-server:2.4.4'

    //compile 'org.apache.zookeeper:zookeeper:3.5.4-beta'
    //compile 'org.apache.curator:curator-framework:4.0.1'
    //compile 'org.apache.curator:curator-x-async:4.0.1'

    implementation group: 'guru.nidi', name: 'graphviz-java', version: '0.7.0'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation group: 'com.google.guava', name: 'guava', version: '11.0.2'

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'commons-io:commons-io:2.6'

    implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
    implementation group: 'org.glassfish', name: 'javax.json', version: '1.1.4'

    // https://mvnrepository.com/artifact/io.swagger/swagger-annotations
    implementation 'io.swagger:swagger-annotations:1.6.1'

    // https://mvnrepository.com/artifact/junit/junit
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

sourceSets {
    main {
        java {
            srcDir 'src/env'
            srcDir 'src/agt'
            srcDir 'src/org'
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/resources'
        }
    }
}

task run (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo platform'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/main.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task bob (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/bob.jcm'
    classpath sourceSets.main.runtimeClasspath
}

// Bob for docker
task bob_d (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs the JaCaMo application'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/bob-d.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task marcos (type: JavaExec, dependsOn: 'classes') {
    group      ' JaCaMo'
    description 'runs agent marcos'
    doFirst {
        mkdir 'log'
    }
    main 'jacamo.infra.JaCaMoLauncher'
    args 'src/jcm/marcos.jcm'
    classpath sourceSets.main.runtimeClasspath
}

task fixTab {
    ant.fixcrlf(eol: 'lf',  includes: '**/*.txt,**/*.bat, **/*.adoc', srcdir: '.')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml', srcdir: 'src')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm', srcdir: '.')
    //ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '**/*.java,**/*.xml,**/*.asl,**/*.jcm,**/*.txt', srcdir: 'doc')
    ant.fixcrlf(tab: 'remove', tablength: '4', javafiles: 'true', includes: '*.gradle', srcdir: '.')
}


clean {
    delete 'bin'
    delete 'build'
    delete 'log'
}


jar {
    archiveBaseName = 'jacamo-rest'
    manifest {
      attributes(
        'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
        'Main-Class': 'jacamo.infra.JaCaMoLauncher',
        'args': 'src/jcm/main.jcm'
      )
    }
}

task copyToLib(type: Copy) {
    into "$buildDir/libs"
    from(configurations.implementation)
}

task stage(dependsOn: ['jar', 'copyToLib', 'clean']) {
    copyToLib.mustRunAfter clean
    jar.mustRunAfter copyToLib
}

stage.dependsOn(copyToLib)

// the following lines is used to avoid errors while generating javadoc
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    archiveBaseName = 'jacamo-rest'
    classifier = 'javadoc'
    from '${docsDir}/../../doc/api'
}

task sourceJar (type : Jar) {
    archiveBaseName = 'jacamo-rest'
    classifier = 'sources'
    from sourceSets.main.allSource
}


publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact sourceJar
            artifact javadocJar

            artifactId 'jacamo-rest'
        }
    }
}


task publishMavenGitHub(dependsOn: [ 'build', 'publishToMavenLocal']) {
    doLast {
        def wdir = System.getProperty("user.home")+'/.m2/repository/org/jacamo/jacamo-rest'
        def rdir = System.getProperty("user.home")+'/pro/jacamo-mvn-repo'
        exec {
            commandLine 'git', 'pull'
            workingDir rdir
        }
        copy {
            from wdir
            into rdir + '/org/jacamo/jacamo-rest'
        }
        exec {
            commandLine 'git', 'add', '*'
            workingDir rdir
        }
        exec {
            commandLine 'git', 'commit', '-a', '-m', 'new version of jacamo rest '+project.version
            workingDir rdir
        }
        exec {
            commandLine 'git', 'push'
            workingDir rdir
        }
    }

    swagger {
        apiSource {
            springmvc = false
            locations = [ 'jacamo.rest' ]
            schemes = [ 'http' ]
            host = '127.0.0.1:8080'
            basePath = ''
            info {
                title = 'REST API for JaCaMo'
                version = 'v'+project.version
                description = 'More information: https://github.com/jacamo-lang/jacamo-rest'
            }
            outputPath = "${project.rootDir}/generated/document.html"
            swaggerDirectory = "${project.rootDir}/generated/swagger-ui"
        }
    }
}
